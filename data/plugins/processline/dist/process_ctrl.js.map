{"version":3,"sources":["../src/process_ctrl.js"],"names":["angular","_","$","profiler","Emitter","kbn","config","TimeSeries","PanelCtrl","MetricsPanelCtrl","alertTab","QueryCtrl","ChartViewModel","moment","unitFormats","panelDefaults","valueNameOptions","valueName","decimals","contentHtml","format","mode","content","thresholds","bgcolor","colors","Name","chartDataModel","nodes","ProcessLineCtrl","$scope","$injector","$window","templateSrv","$sce","defaults","panel","CompanyName","events","on","onInitEditMode","bind","onRender","publishAppEvent","scope","chartModel","getUnits","document","addEditorTab","onDataReceived","onDataError","getUnitFormats","evtName","evt","$root","appEvent","subItem","value","render","updateContent","renderText","renderingCompleted","replace","_this","remarkable","System","import","then","Remarkable","$apply","html","trustAsHtml","scopedVars","e","console","log","data","nodeName","prompt","newNodeDataModel","name","id","nextNodeID","x","y","width","stages","url","Data","addNode","isNumber","scaledDecimals","delta","dec","Math","floor","LN10","magn","pow","norm","size","result","max","err","dataList","series","map","seriesHandler","setValues","updateNode","seriesData","datapoints","alias","target","unit","flotpairs","getFlotPairs","nullPointMode","length","i","seriesItem","debug","applyOverrides","lastPoint","last","lastValue","isArray","valueRounded","valueFormated","isString","escape","stats","decimalInfo","getDecimalsForValue","formatFunc","valueFormats","roundValue","seriesItemAlias","colorData","overrides","info","metricsNodeName","nodeData","dataKeys","Object","keys","dataValues","values","SingleProcess","EachProcess","ProcessName","dataValue","pop","push","threshold","split","StagesArray","Value1","parseInt","Value2","Value3","Value4","color","val","stroke","status","nodename","nodeDetails","singleProcess","process","node","nodeDelete","index","findIndex","o","splice","nodeWidth","thresholdValue","getElementById","processName","statusName","alert","colorIndex","shareScope","$new","dashboard","src","templateUrl"],"mappings":"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","file":"process_ctrl.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport {profiler} from 'app/core/profiler';\nimport {Emitter} from 'app/core/core';\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\n//import 'public/plugins/grafana-processline-panel/css/style1.css'\nimport {PanelCtrl} from 'app/plugins/sdk';\nimport {MetricsPanelCtrl, alertTab} from 'app/plugins/sdk';\nimport {QueryCtrl} from 'app/features/panel/query_ctrl';\nimport {ChartViewModel} from './flowchart/ChartViewModel';\nimport moment from 'moment';\n\nimport  './drag_drop';\nimport './node-directive'\n//import {top,left} from './drag_drop';\n\nconst unitFormats= [];\n const panelDefaults = {\n\n      valueNameOptions:  ['min','max','avg', 'current', 'total', 'name'],\n      valueName: 'avg',\n      decimals:3,\n      contentHtml:'',\n      format: 'none',\n       mode: \"markdown\",\n       content: \"# title\",\n      thresholds: '0,10',\n      bgcolor:'white',\n      colors: ['rgba(50, 172, 45, 1)', 'rgba(241, 255, 0, 1)', 'rgba(245, 54, 54, 1)'],\n      Name:'Node',\n      chartDataModel: {\n        nodes:[\n\n\n\n        ]\n\n      },\n    };\nexport class ProcessLineCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector,$window,templateSrv, $sce) {\n   super($scope, $injector,$window);\n   this.$scope=$scope;\n   this.templateSrv=templateSrv;\n   this.$sce=$sce;\n   _.defaults(this.panel, panelDefaults);\n    this.CompanyName = \"Process Line Montoring\";\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('refresh', this.onRender.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n    this.publishAppEvent('panel-initialized', {scope: this.$scope});\n    //this.events.on('init-edit-mode', this.updateClock.bind(this));\n    this.chartModel=new ChartViewModel(this.panel.chartDataModel)\n    this.getUnits();\n   // this.update();\n    this.document=document;\n\n }\n onInitEditMode() {\n     this.addEditorTab('Options', 'public/plugins/grafana-processline-panel/Options.html', 4);\n     this.addEditorTab('Process Options', 'public/plugins/grafana-processline-panel/editor.html', 3);\n     this.addEditorTab('Help', 'public/plugins/grafana-processline-panel/help.html', 5);\n     this.events.on('data-received', this.onDataReceived.bind(this));\n     this.events.on('data-error', this.onDataError.bind(this));\n     this.panel.unitFormats = kbn.getUnitFormats();\n   }\n\npublishAppEvent(evtName, evt) {\n    this.$scope.$root.appEvent(evtName, evt);\n  }\n\n  setUnitFormat(subItem) {\n      this.panel.format = subItem.value;\n      this.render();\n    }\n  getUnits() {\n\n   this.unitFormats = kbn.getUnitFormats();\n\n/*\n        for(var i=0; i<=this.panel.chartDataModel.nodes.length; i++){\n         \tfor(var e of this.panel.chartDataModel.nodes) {\n                 var threshold=e.thresholds;\n                 var values=threshold.split(\",\");\n                  var lowerValue=parseInt(values[0]);\n                                     console.log(lowerValue);\n                                     var higherValue=parseInt(values[1]);\n                                       console.log(higherValue);\n\n                                       if(lowerValue<0|| higherValue>0){\n                                       this.src=\"public/plugins/grafana-processline-panel/img/worng.png\";\n                                       }\n                                       else{\n                                       this.src=\"public/plugins/grafana-processline-panel/img/tick.png\";\n                                       }//console.log(values);\n             }\n         }\n*/\n       //this.src=\"public/plugins/grafana-processline-panel/img/tick.png\";\n       //this.width=\"130px\"\n     //var e1=document.getElementById(\"shape\");\n     //this.align = e1.getAttribute(\"nodeX\");\n     }\n\n\n                         onRender() {\n                         if (this.panel.mode === 'html') {\n                             this.updateContent(this.panel.content);\n                         }\n                         else if (this.panel.mode === 'text') {\n                             this.renderText(this.panel.content);\n                         }\n                         this.renderingCompleted();\n                     };\n                     renderText(content) {\n                         content = content\n                             .replace(/&/g, '&amp;')\n                             .replace(/>/g, '&gt;')\n                             .replace(/</g, '&lt;')\n                             .replace(/\\n/g, '<br/>');\n                         this.updateContent(content);\n                     };\n                     renderMarkdown(content) {\n                         var _this = this;\n                         if (!this.remarkable) {\n                             return System.import('remarkable').then(function (Remarkable) {\n                                 _this.remarkable = new Remarkable();\n                                 _this.$scope.$apply(function () {\n                                     _this.updateContent(_this.remarkable.render(content));\n                                 });\n                             });\n                         }\n                         this.updateContent(this.remarkable.render(content));\n                     };\n                     updateContent(html) {\n                         try {\n\n                             this.panel.contentHtml= this.$sce.trustAsHtml(this.templateSrv.replace(html, this.panel.scopedVars));\n                         }\n                         catch (e) {\n                             console.log('Text panel error: ', e);\n                             this.content = this.$sce.trustAsHtml(html);\n                         }\n                     };\n\n\n   addNewNode(data) {\n\n   \t\tvar nodeName = prompt(\"Enter a node name:\", \"New node\");\n   \t\tif (!nodeName) {\n   \t\t\treturn;\n   \t\t}\n\n   \t\t//\n\n\n   \t\t// Template for a new node.\n   \t\t//\n   \t\tvar newNodeDataModel = {\n   \t\t\tname: nodeName,\n   \t\t\tid: this.panel.nextNodeID++,\n   \t\t\tx: 0,\n   \t\t\ty: 0,\n   \t\t\twidth:'80px',\n   \t\t\tthresholds: '0,10,20,30,40',\n   \t\t\tstages:'init,start,run,process,end',\n   \t\t\tcolors: ['rgba(50, 172, 45, 1)', 'rgba(241, 255, 0, 1)', 'rgba(245, 54, 54, 1)','rgba(245, 54, 54, 1)','rgba(245, 54, 54, 1)'],\n   \t\t\turl:'',\n   \t\t\tData: [\n\n\n   \t\t\t]\n\n   \t\t};\n\n        //newNodeDataModel.Data.push(data)\n   \t\tthis.chartModel.addNode(newNodeDataModel);\n\n   \t};\n\n    getDecimalsForValue(value) {\n        if (_.isNumber(this.panel.decimals)) {\n          return {decimals: this.panel.decimals, scaledDecimals: null};\n        }\n\n        var delta = value / 2;\n        var dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n        var magn = Math.pow(10, -dec),\n          norm = delta / magn, // norm is between 1.0 and 10.0\n          size;\n\n        if (norm < 1.5) {\n          size = 1;\n        } else if (norm < 3) {\n          size = 2;\n          // special case for 2.5, requires an extra decimal\n          if (norm > 2.25) {\n            size = 2.5;\n            ++dec;\n          }\n        } else if (norm < 7.5) {\n          size = 5;\n        } else {\n          size = 10;\n        }\n\n        size *= magn;\n\n        // reduce starting decimals if not needed\n        if (Math.floor(value) === value) { dec = 0; }\n\n        var result = {};\n        result.decimals = Math.max(0, dec);\n        result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n\n        return result;\n      }\n\n      onDataError(err) {\n          this.onDataReceived([]);\n        }\n\n     onDataReceived(dataList) {\n         this.series = dataList.map(this.seriesHandler.bind(this));\n         var data={};\n         this.setValues(data);\n        this.data=data;\n         console.log(this.data);\n         this.updateNode(this.data);\n         this.render();\n     }\n\n     seriesHandler(seriesData) {\n\n         var series = new TimeSeries({\n           datapoints: seriesData.datapoints,\n           alias: seriesData.target,\n           unit: false,\n         });\n         series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n\n         return series;\n     }\n     setValues(data){\n     if (this.series && this.series.length > 0) {\n     \t\t\tfor(var i = 0; i < this.series.length; i++){\n     \t\t\t\tvar seriesItem = this.series[i];\n     \t\t\t\tconsole.debug('setting values for series');\n     \t\t\t\tconsole.debug(seriesItem);\n     \t\t\t\tdata[seriesItem.alias] = this.applyOverrides(seriesItem.alias);\n     \t\t\t\tvar lastPoint = _.last(seriesItem.datapoints);\n     \t\t\t    var lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n     \t\t\tconsole.log(lastPoint);\n     \t\t\tconsole.log(lastValue);\n     \t\t\tif (this.panel.valueName === 'name') {\n                \t\t\t\t\tdata[seriesItem.alias].value = 0;\n                \t\t\t        data[seriesItem.alias].valueRounded = 0;\n                \t\t\t        data[seriesItem.alias].valueFormated = seriesItem.alias;\n                \t\t\t\t} else if (_.isString(lastValue)) {\n                \t\t\t        data[seriesItem.alias].value = 0;\n                \t\t\t        data[seriesItem.alias].valueFormated = _.escape(lastValue);\n                \t\t\t        data[seriesItem.alias].valueRounded = 0;\n                \t\t\t\t} else {\n                \t\t\t\t\t//data[seriesItem.alias].value = lastValue;\n                \t\t\t\t\tdata[seriesItem.alias].Name=seriesItem.alias\n                \t\t\t        //data[seriesItem.alias].flotpairs = seriesItem.flotpairs;\n                                   data[seriesItem.alias].value = seriesItem.stats[this.panel.valueName];\n                                   data.flotpairs = seriesItem.flotpairs;\n                                   var decimalInfo = this.getDecimalsForValue(data[seriesItem.alias].value);\n                                   var formatFunc = kbn.valueFormats[this.panel.format];\n                                   data[seriesItem.alias].valueFormated = formatFunc(data[seriesItem.alias].value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n                                   data[seriesItem.alias].valueRounded = kbn.roundValue(data[seriesItem.alias].value, decimalInfo.decimals);\n\n                \t\t\t\t}\n\n     }\n     }\n     }\n     applyOverrides(seriesItemAlias){\n     var seriesItem={}, colorData = {}, overrides = {};\n     \t\tconsole.info('applying overrides for seriesItem');\n     \t\tconsole.debug(seriesItemAlias);\n     \t\tconsole.debug(this.panel.chartDataModel.nodes);\n     \t\tfor(var i=0; i<=this.panel.chartDataModel.nodes.length; i++){\n     \t\t\tconsole.debug('comparing:');\n     \t\t\tconsole.debug(this.panel.chartDataModel.nodes[i]);\n     \t\t\tfor(var e of this.panel.chartDataModel.nodes) {\n     \t\t\tif (e.name == this.metricsNodeName){\n     \t\t\t\toverrides=seriesItemAlias;\n\n     \t\t\t}\n     \t\t}\n          }\n\n     \t\tseriesItem.Name = overrides|| this.panel.Name;\n\n     \t\treturn seriesItem;\n\n\n     }\n\n        updateNode(nodeData){\n                  var dataKeys=Object.keys(nodeData);\n                   console.log(dataKeys[0]);\n                  var dataValues=Object.values(nodeData);\n                   console.log(dataValues[0]);\n                  console.log(dataValues);\n\n               var SingleProcess=this.panel.chartDataModel.nodes;\n\n               for(var EachProcess of SingleProcess){\n\n               var ProcessName=EachProcess.name;\n               for(var i=0;i<=dataValues.length;i++){\n                 if(ProcessName==dataKeys[i]){\n                  var dataValue=dataValues[i];\n                  console.log(dataValues);\n                  EachProcess.Data.pop();\n                 EachProcess.Data.push(dataValue);\n\n                 }\n\n\n               }\n\n               }\n\n                       /*\n                      if(singleProcess.name==this.metricsNodeName){\n\n                            singleProcess.Data.pop();\n\n                            singleProcess.Data.push(nodeData);\n\n\n\n\n                }*/\n\n\n        }\n\n\n    render(){\n\n             \tfor(var e of this.panel.chartDataModel.nodes) {\n                     var threshold=e.thresholds;\n                     var values=threshold.split(\",\");\n                     console.log(values);\n\n                     var stages=e.stages;\n                     var StagesArray=stages.split(\",\");\n                     console.log(StagesArray);\n                    var Value1=parseInt(values[0]);\n                    console.log(Value1);\n                    var Value2=parseInt(values[1]);\n                      console.log(Value2);\n                      var Value3=parseInt(values[2]);\n                       console.log(Value3);\n                     var Value4=parseInt(values[3]);\n                     console.log(Value4);\n                    var color=e.colors;\n                      console.log(color);\n                      console.log(color[0]);\n                     var data;\n                     for( var val of e.Data){\n                         data=val.valueFormated;\n                         }\n                     console.log(data);\n\n                      if(data<Value1){\n                      e.stroke=color[0];\n                      e.status=StagesArray[0];\n                      console.log(e);\n                      }\n                      else if(data>Value1 && data<Value2){\n                      e.stroke=color[1]\n                      e.status=StagesArray[1];\n                       console.log(e);\n                      }\n                      else if(data>Value2 && data<Value3){\n                         e.stroke=color[2];\n                         e.status=StagesArray[2];\n                       console.log(e);\n                        }\n                        else if(data>Value3 && data<Value4){\n\n                         e.stroke=color[3]\n                         e.status=StagesArray[3];\n                         console.log(e);\n                         }\n                         else if(data>Value4){\n                           e.stroke=color[4]\n                           e.status=StagesArray[4];\n                              console.log(e);\n                             }\n                      //this.src=src;\n                      //this.bordershadow=bordershadow;\n\n\n             }\n\n\n           //this.width=\"130px\"\n\n\n    }\n   UpdateNodeMetrics(nodename){\n\n   this.metricsNodeName=nodename;\n         var nodeDetails=this.panel.chartDataModel.nodes;\n            for(var singleProcess of nodeDetails){\n                      if(singleProcess.name==this.metricsNodeName){\n                             this.process=singleProcess;\n                             console.log(this.process);\n\n                             }\n\n      }\n\n   }\n\n\n    DeleteNode(node){\n    var nodeDelete=this.panel.chartDataModel.nodes;\n     var index = nodeDelete.findIndex(function(o){\n     return o.name === node;\n     console.log(index);\n    })\n    nodeDelete.splice(index, 1);\n}\n\n   updateWidth(nodeName,nodeWidth){\n     var nodeDetails=this.panel.chartDataModel.nodes;\n         if(singleProcess.name==nodeName){\n            for(var singleProcess of nodeDetails.Data){\n                singleProcess.width=nodeWidth;\n                }\n             }\n        }\n\n   changeBgColor(color){\n    this.panel.bgcolor=color;\n    }\n\n   updateThresholds(threshold){\n        console.log(threshold);\n        var thresholdValue=document.getElementById(\"thresold\").value;;\n        console.log(thresholdValue);\n\n\n                            var nodeDetails=this.panel.chartDataModel.nodes;\n\n                            for(var singleProcess of nodeDetails){\n                                 if(singleProcess.name==threshold){\n\n                                    singleProcess.thresholds=thresholdValue;\n\n\n                                    console.log(this.panel.chartDataModel.nodes);\n\n                                  }\n\n                            }\n\n    }\nupdateStatus(processName){\n        console.log(processName);\n        var statusName=document.getElementById(\"stages\").value;;\n        console.log(statusName);\n\n\n                            var nodeDetails=this.panel.chartDataModel.nodes;\n\n                            for(var singleProcess of nodeDetails){\n                                 if(singleProcess.name==processName){\n\n                                    singleProcess.stages=statusName;\n\n                                     alert(\"successfully updated\");\n                                  }\n\n                            }\n\n    }\n\n    changeColor(colorIndex, color,nodeName){\n\n            var nodeDetails=this.panel.chartDataModel.nodes;\n        \n             for(var singleProcess of nodeDetails){\n               if(singleProcess.name==nodeName){\n        \n               singleProcess.colors[colorIndex]=color;\n\n             console.log(singleProcess);\n                    \n                 }\n            }\n        \n\n            \n    \t\t\n    \t}\n\n    \tremoveColor(colorIndex,nodeName){\n\n                    var nodeDetails=this.panel.chartDataModel.nodes;\n                \n                     for(var singleProcess of nodeDetails){\n                       if(singleProcess.name==nodeName){\n                \n                       singleProcess.colors.splice(colorIndex,1);\n                    \n                            \n                         }\n                    }\n\n\n    \t}\n\n    \taddColor(nodeName){\n\n                            var nodeDetails=this.panel.chartDataModel.nodes;\n\n                             for(var singleProcess of nodeDetails){\n\n                               if(singleProcess.name==nodeName){\n\n                               singleProcess.colors.push('rgba(255, 255, 255, 1)');\n\n                                console.log(singleProcess.colors);\n                                 }\n                            }\n\n\n    \t}\n     sharePanelDefalut() {\n         var shareScope = this.$scope.$new();\n         shareScope.panel = this.panel.chartDataModel;\n         shareScope.dashboard = this.dashboard;\n\n         this.publishAppEvent('show-modal', {\n           src: 'public/plugins/grafana-processline-panel/shareModal.html',\n           scope: shareScope\n         });\n\n\n\n       }\n\n       addUrl(nodeName,url){\n            var nodeDetails=this.panel.chartDataModel.nodes;\n             if(singleProcess.name==nodeName){\n                for(var singleProcess of nodeDetails.Data){\n                     singleProcess.url=url;\n                 }\n              }\n         }\n\n}\n\nProcessLineCtrl.templateUrl = 'module.html';"]}